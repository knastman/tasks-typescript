{"mappings":"ACaA,QAAQ,GAAG,CADY,IAYvB,QAAQ,GAAG,CADU,WAQrB,IAAI,EAAoB,CAAA,EAIxB,QAAQ,GAAG,CAAC,MAJY,CAAA,GAKxB,QAAQ,GAAG,CAAC,UACZ,QAAQ,GAAG,CAAC,UAKZ,QAAQ,GAAG,CAFG,CAAA,GAKd,QAAQ,GAAG,CAAC,iEACZ,QAAQ,GAAG,CAAC,kCAWZ,QAAQ,GAAG,CAHG,IAKd,QAAQ,GAAG,CAAC,kCAsBZ,QAAQ,GAAG,EAdT,QAAQ,GAAG,CADC,GASV,QAAQ,GAAG,CAAC,0BACD,CAAA,IAOf,QAAQ,GAAG,CAAC,kCAWZ,QAAQ,GAAG,CAAe,GAG1B,QAAQ,GAAG,CAAC,kCAaV,QAAQ,GAAG,CAJK,CAAA,GAUlB,QAAQ,GAAG,CAAC,kCAWZ,QAAQ,GAAG,CAJQ,AAIG,CAAC,OAAQ,MAAM,CAJX,MAAM,CAIO,CAAC,MAAO,OAAO,GAGtD,QAAQ,GAAG,CAAC,kCAoBZ,QAAQ,GAAG,CAAC,yBAA2B,AAbvC,SAAmC,CAAe,EAGhD,IAAM,EAAmB,EAAO,QAAQ,GAElC,EAAkB,EAAiB,KAAK,CAAC,KAK/C,OAHA,QAAQ,GAAG,CAAC,OAAO,GACnB,QAAQ,GAAG,CAAC,OAAO,GAEZ,CACT,EAEiE,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAG,GAEvF,QAAQ,GAAG,CAAC,kCAEZ,QAAQ,GAAG,CAAC,kEAYZ,MAAM,EAAS,CAAC,EAAG,EAAG,EAAG,EAAE,CACrB,EAAS,CAAC,EAAG,EAAG,EAAG,EAAE,CAG3B,SAAS,EAAkB,CAAa,CAAE,CAAiB,CAAE,CAAiB,MAGxE,EAEJ,IAAM,EAAQ,EAAS,OAAO,CAAC,AAAC,IAC9B,QAAQ,GAAG,CAAC,EACd,GAUA,OATc,EAAS,OAAO,CAAC,AAAC,IAC9B,QAAQ,GAAG,CAAC,EACd,GAEA,QAAQ,GAAG,CAAC,GAKL,CACT,CAcA,MAAM,EAAY,EAZlB,SAAqB,CAAW,CAAE,CAAW,EAE3C,OADY,EAAO,CAErB,EASiD,EAAQ,GACnD,EAAc,EARpB,SAAuB,CAAW,CAAE,CAAW,EAE7C,OADY,EAAO,CAErB,EAKqD,EAAQ,GAE7D,QAAQ,GAAG,CAAC,GACZ,QAAQ,GAAG,CAAC,GAaZ,QAAQ,GAAG,CAAC,gEACZ,QAAQ,GAAG,CAAC,kCAgCZ,AAfkC,CAAA,CAChC,KAAM,QACN,IAAK,GACL,eACE,QAAQ,GAAG,CAAC,qBAAsB,IAAI,CAAC,IAAI,CAAG,gBAAkB,IAAI,CAAC,GAAG,CAE1E,CACF,CAAA,EAQc,YAAY,GAC1B,AARkC,CAAA,CAChC,KAAM,QACN,IAAK,GACL,eACE,QAAQ,GAAG,CAAC,qBAAsB,IAAI,CAAC,IAAI,CAAG,gBAAkB,IAAI,CAAC,GAAG,CAC1E,CACF,CAAA,EAEc,YAAY,GAE1B,QAAQ,GAAG,CAAC,gBAiBZ,MAAM,EAAsB,CAC1B,MAAM,QACN,KAAM,KACN,MAAM,GACR,EAIA,SAAS,EAAkB,CAAS,EAGlC,IAAM,EAAoB,EAAU,KAAK,CAAI,AAAkB,GAAlB,EAAU,KAAK,CAU5D,MAPqB,CACnB,MAAM,EAAU,KAAK,CACrB,KAAM,EAAU,IAAI,CACpB,MAAM,CACR,CAKF,CAlBA,QAAQ,GAAG,CAAC,GAmBZ,EAAkB,GAClB,QAAQ,GAAG,CAAC,EAAkB,IAG9B,QAAQ,GAAG,CAAC,gBA0BV,QAAQ,GAAG,CAPgB,CAC3B,KAAK,QACL,KAAK,MACL,IAAI,EACN","sources":["<anon>","src/main.ts"],"sourcesContent":["var $ad2bcec7a0192558$exports = {};\n/**********\n TypeScript 1 - övningsuppgifter\n *********/ /****************** Övning 1.1 **********************/ // Deklarera tre variabler av typ number\n// Tilldela de två första varsitt värde\n// Tilldela den tredje summan av de två första\nconst $ad2bcec7a0192558$var$number1 = 10;\nconst $ad2bcec7a0192558$var$number2 = 15;\nconst $ad2bcec7a0192558$var$number3 = $ad2bcec7a0192558$var$number1 + $ad2bcec7a0192558$var$number2;\nconsole.log($ad2bcec7a0192558$var$number3);\n/****************** Övning 1.2 **********************/ // Deklarera tre variabler av typ string\n// Tilldela de två första varsitt värde\n// Tilldela den tredje \nconst $ad2bcec7a0192558$var$word1 = \"Hej\";\nconst $ad2bcec7a0192558$var$word2 = \"Hopp\";\nconst $ad2bcec7a0192558$var$word3 = $ad2bcec7a0192558$var$word1 + $ad2bcec7a0192558$var$word2;\nconsole.log($ad2bcec7a0192558$var$word3);\n/****************** Övning 1.3 **********************/ // Deklarera två variabler, en av valfri typ och en av typ boolean\n// Tilldela den första ett värde\n// Utvärdera om den första variabeln är av typ number och tilldela resultatet till den andra variabeln\nlet $ad2bcec7a0192558$var$variabel1 = false;\nconst $ad2bcec7a0192558$var$variabel2 = \"Detta \\xe4r variabel 2\";\nconst $ad2bcec7a0192558$var$variabel3 = 5;\nconsole.log(typeof $ad2bcec7a0192558$var$variabel1);\nconsole.log(typeof $ad2bcec7a0192558$var$variabel2);\nconsole.log(typeof $ad2bcec7a0192558$var$variabel3);\nif (typeof $ad2bcec7a0192558$var$variabel3 == \"number\") $ad2bcec7a0192558$var$variabel1 = true;\nconsole.log($ad2bcec7a0192558$var$variabel1);\nconsole.log(\"___________________________FUNCTION__________________________\");\nconsole.log(\"___________________________2.1\");\n/****************** Övning 2.1 **********************/ // Skriv en funktion som tar emot två argument av typ number och returnera ett värde av typ number\n// Funktionen ska multiplicera argumenten och returnera dem\nfunction $ad2bcec7a0192558$var$multi(arg1, arg2) {\n    const sum = arg1 * arg2;\n    return sum;\n}\nconsole.log($ad2bcec7a0192558$var$multi(5, 3));\nconsole.log(\"___________________________2.2\");\n/****************** Övning 2.2 **********************/ // Skriv en funktion som tar emot två argument av typ number och returnerar ett värde av typ boolean\n// Funktionen ska addera de två argumenten och returnera true om summan är mer eller lika med 10, och false i annat fall\nfunction $ad2bcec7a0192558$var$moreOrLessThan10(argument1, argument2) {\n    const sum = argument1 + argument2;\n    console.log(sum);\n    let isItMore;\n    if (sum >= 10) {\n        console.log(\"Summan \\xe4r mer \\xe4n 10\");\n        isItMore = true;\n    } else {\n        console.log(\"Summan \\xe4r mindre \\xe4n 10\");\n        isItMore = false;\n    }\n    return isItMore;\n}\n// moreOrLessThan10(2,5);\nconsole.log($ad2bcec7a0192558$var$moreOrLessThan10(3, 5));\nconsole.log(\"___________________________2.3\");\n/****************** Övning 2.3 **********************/ // Skriv en funktion med en parameter av typ number Array och returnerar ett värde av typ number\n// Funktionen ska returnera längden på arrayen\nfunction $ad2bcec7a0192558$var$lengthOfArray(arry) {\n    const arrayLength = arry.length;\n    // console.log(arrayLength);\n    return arrayLength;\n}\nconsole.log($ad2bcec7a0192558$var$lengthOfArray([\n    1,\n    5,\n    10,\n    20,\n    15,\n    11,\n    12\n]));\nconsole.log(\"___________________________2.4\");\n/****************** Övning 2.4 **********************/ // Skriv en funktion med två parameter av typ string Array och returnerar ett värde av typ boolean\n// Funktionen ska returnera true om längden på arrayerna är lika långa, i annat fall ska den returnera false\nfunction $ad2bcec7a0192558$var$arrayEqualLenght(array1, array2) {\n    // console.log(array1.length);\n    // console.log(array2.length);\n    let sameLenght = false;\n    if (array1.length == array2.length) sameLenght = true;\n    console.log(sameLenght);\n    return sameLenght;\n}\n$ad2bcec7a0192558$var$arrayEqualLenght([\n    \"1\",\n    \"5\",\n    \"10\",\n    \"20\",\n    \"15\"\n], [\n    \"1\",\n    \"5\",\n    \"10\",\n    \"20\",\n    \"15\",\n    \"20\"\n]);\nconsole.log(\"___________________________2.5\");\n/****************** Övning 2.5 **********************/ // Skriv en funktion med två parameter av typ string Array och returnerar ett värde av typ string array\n// Funktionen ska lägga ihop de båda arrayerna och returnera den nya arrayen.\nfunction $ad2bcec7a0192558$var$addArrays(array1, array2) {\n    const newArray = array1.concat(array2);\n    return newArray;\n}\nconsole.log($ad2bcec7a0192558$var$addArrays([\n    \"tjoo\",\n    \"hej\"\n], [\n    \"hej\",\n    \"hopp\"\n]));\nconsole.log(\"___________________________2.6\");\n/****************** Övning 2.6 **********************/ // Skriv en funktion med en parameter av typ number Array och returnerar ett värde av typ string Array \n// Funktionen ska returnera en array med lika många element som argumentet men alla numbers ska ha gjort om till string\n//Hint: använd metoden toString()\nfunction $ad2bcec7a0192558$var$arraySameNumberOfElements(array1) {\n    // const arrayLength = array1.length;\n    // console.log(arrayLength);\n    const newArrayAsString = array1.toString();\n    // console.log('Ny array som sträng: ' + newArrayAsString);\n    const newArrayAsArray = newArrayAsString.split(\",\");\n    // console.log('Ny array som array: ' + newArrayAsArray);\n    console.log(typeof newArrayAsString);\n    console.log(typeof newArrayAsArray);\n    return newArrayAsArray;\n}\nconsole.log(\"Nya arrayen 2.6 blir: \" + $ad2bcec7a0192558$var$arraySameNumberOfElements([\n    1,\n    5,\n    10,\n    20,\n    15,\n    10\n]));\nconsole.log(\"___________________________2.7\");\nconsole.log(\"_________________________HIT \\xc4R KLART_________________________\");\n/****************** Övning 2.7 **********************/ // Skriv en higher order funktion som har tre parametrar, en av typ Function och två av typ number array. Arrayerna behöver vara lika långa. Funktionen ska returnera en number array. \n// Skriv några valfria funktioner att använda som callback-funktioner. De ska alla ha två parametrar av typ number, göra någon beräkning med argumenten och returnera ett number.\n// Higher order funktionen ska loopa igenom arrayerna och anropa callback-funktionen i varje loop med ett nummer från vardera arrayen.\n// Higher order funktionen returnerar en array med resultatet av beräkningarna som görs med callback-funktionen\nconst $ad2bcec7a0192558$var$array1 = [\n    1,\n    2,\n    3,\n    4\n];\nconst $ad2bcec7a0192558$var$array2 = [\n    2,\n    3,\n    4,\n    5\n];\nfunction $ad2bcec7a0192558$var$returnNumberArray(func, nrArray1, nrArray2) {\n    // console.log(func(array1, array2));\n    // const resultFromFunc = func(array1, array2);\n    let resultFromFunc;\n    const arg1 = nrArray1.forEach((arraynumber)=>{\n        console.log(func);\n    });\n    const arg2 = nrArray2.forEach((arraynumber)=>{\n        console.log(func);\n    });\n    console.log(arg1);\n    // console.log('resultArray');\n    // console.log(resultArray)\n    return resultFromFunc;\n}\nfunction $ad2bcec7a0192558$var$callbackAdd(arg1, arg2) {\n    const sum = arg1 + arg2;\n    return sum;\n}\nfunction $ad2bcec7a0192558$var$callbackMulti(arg1, arg2) {\n    const sum = arg1 * arg2;\n    return sum;\n}\n// const resultAdd = returnNumberArray(add, [1, 2, 3, 4], [2, 3, 4, 5]);\n// const resultMulti = callbackAdd(multi2, [1, 2, 3, 4], [2, 3, 4, 5]);\nconst $ad2bcec7a0192558$var$resultAdd = $ad2bcec7a0192558$var$returnNumberArray($ad2bcec7a0192558$var$callbackAdd, $ad2bcec7a0192558$var$array1, $ad2bcec7a0192558$var$array2);\nconst $ad2bcec7a0192558$var$resultMulti = $ad2bcec7a0192558$var$returnNumberArray($ad2bcec7a0192558$var$callbackMulti, $ad2bcec7a0192558$var$array1, $ad2bcec7a0192558$var$array2);\nconsole.log($ad2bcec7a0192558$var$resultAdd); //[3, 5, 7, 9],\nconsole.log($ad2bcec7a0192558$var$resultMulti); //[2, 6, 12, 20]\n// console.log(returnNumberArray(resultAdd, 10, 20));\n// console.log(returnNumberArray(resultMulti, 5, 2));\n// returnNumberArray(resultAdd, [1, 2, 3, 4], [2, 3, 4, 5]);\n// console.log(result1);\n// console.log(result2);\nconsole.log(\"___________________________OBJECT___________________________\");\nconsole.log(\"___________________________3.1\");\nconst $ad2bcec7a0192558$var$personObject1 = {\n    name: \"Petra\",\n    age: 48,\n    presentation () {\n        console.log(\"This is the name: \" + this.name + \" and the age \" + this.age);\n    }\n};\nconst $ad2bcec7a0192558$var$personObject2 = {\n    name: \"Bosse\",\n    age: 14,\n    presentation () {\n        console.log(\"This is the name: \" + this.name + \" and the age \" + this.age);\n    }\n};\n$ad2bcec7a0192558$var$personObject1.presentation();\n$ad2bcec7a0192558$var$personObject2.presentation();\nconsole.log(\"____________\");\nconst $ad2bcec7a0192558$var$carObject1 = {\n    model: \"Honda\",\n    year: 1978,\n    price: 20000\n};\nconsole.log($ad2bcec7a0192558$var$carObject1);\nfunction $ad2bcec7a0192558$var$carObjectDiscount(carObject) {\n    // console.log(carObject.price);\n    const newCarObjectprice = carObject.price - carObject.price * 0.20;\n    // console.log(newCarObjectprice);\n    const newCarObject = {\n        model: carObject.model,\n        year: carObject.year,\n        price: newCarObjectprice\n    };\n    // console.log(newCarObject);\n    return newCarObject;\n}\n$ad2bcec7a0192558$var$carObjectDiscount($ad2bcec7a0192558$var$carObject1);\nconsole.log($ad2bcec7a0192558$var$carObjectDiscount($ad2bcec7a0192558$var$carObject1));\nconsole.log(\"____________\");\nconst $ad2bcec7a0192558$var$animal1 = {\n    name: \"Bosse\",\n    type: \"Cat\",\n    age: 14\n};\nfunction $ad2bcec7a0192558$var$logAnimal(animal) {\n    console.log(animal);\n}\n$ad2bcec7a0192558$var$logAnimal($ad2bcec7a0192558$var$animal1);\n\n\n//# sourceMappingURL=index.abfcc263.js.map\n","/**********\n TypeScript 1 - övningsuppgifter\n *********/\n\n/****************** Övning 1.1 **********************/\n// Deklarera tre variabler av typ number\n// Tilldela de två första varsitt värde\n// Tilldela den tredje summan av de två första\n\n\nconst number1:number = 10;\nconst number2:number = 15;\nconst number3:number = number1 + number2;\nconsole.log(number3);\n\n\n/****************** Övning 1.2 **********************/\n// Deklarera tre variabler av typ string\n// Tilldela de två första varsitt värde\n// Tilldela den tredje \n\nconst word1:string = 'Hej';\nconst word2:string = 'Hopp';\nconst word3:string = word1 + word2;\nconsole.log(word3);\n\n/****************** Övning 1.3 **********************/\n// Deklarera två variabler, en av valfri typ och en av typ boolean\n// Tilldela den första ett värde\n// Utvärdera om den första variabeln är av typ number och tilldela resultatet till den andra variabeln\n\nlet variabel1:boolean = false;\nconst variabel2:string = 'Detta är variabel 2';\nconst variabel3:number = 5;\n\nconsole.log(typeof(variabel1));\nconsole.log(typeof(variabel2));\nconsole.log(typeof(variabel3));\n\nif (typeof(variabel3) == 'number' ){\n  variabel1 = true;\n}\nconsole.log(variabel1);\n\n\nconsole.log('___________________________FUNCTION__________________________');\nconsole.log('___________________________2.1');\n\n\n/****************** Övning 2.1 **********************/\n// Skriv en funktion som tar emot två argument av typ number och returnera ett värde av typ number\n// Funktionen ska multiplicera argumenten och returnera dem\n\nfunction multi(arg1:number, arg2:number):number {\n  const sum = arg1 * arg2;\n  return sum;\n}\nconsole.log(multi(5, 3));\n\nconsole.log('___________________________2.2');\n\n/****************** Övning 2.2 **********************/\n// Skriv en funktion som tar emot två argument av typ number och returnerar ett värde av typ boolean\n// Funktionen ska addera de två argumenten och returnera true om summan är mer eller lika med 10, och false i annat fall\n\nfunction moreOrLessThan10(argument1:number, argument2:number):boolean {\n  const sum = argument1 + argument2;\n  console.log(sum);\n  let isItMore; \n  \n  if(sum >= 10) {\n    console.log('Summan är mer än 10');\n    isItMore = true;\n  }\n  else {\n    console.log('Summan är mindre än 10');\n    isItMore = false;\n  }\n  return isItMore\n}\n// moreOrLessThan10(2,5);\nconsole.log(moreOrLessThan10(3,5));\n\nconsole.log('___________________________2.3');\n\n/****************** Övning 2.3 **********************/\n// Skriv en funktion med en parameter av typ number Array och returnerar ett värde av typ number\n// Funktionen ska returnera längden på arrayen\n\nfunction lengthOfArray(arry:number[]):number {\n  const arrayLength = arry.length;\n  // console.log(arrayLength);\n  return arrayLength\n}\nconsole.log(lengthOfArray([1, 5, 10, 20, 15, 11, 12]));\n\n\nconsole.log('___________________________2.4');\n\n/****************** Övning 2.4 **********************/\n// Skriv en funktion med två parameter av typ string Array och returnerar ett värde av typ boolean\n// Funktionen ska returnera true om längden på arrayerna är lika långa, i annat fall ska den returnera false\n\nfunction arrayEqualLenght(array1:string[], array2:string[]):boolean {\n  // console.log(array1.length);\n  // console.log(array2.length);\n  let sameLenght= false;\n  \n  if (array1.length == array2.length){\n    sameLenght = true;  }\n  console.log(sameLenght);\n  return sameLenght;\n}\n\narrayEqualLenght(['1', '5', '10', '20', '15'], ['1', '5', '10', '20', '15', '20']);\n\nconsole.log('___________________________2.5');\n\n/****************** Övning 2.5 **********************/\n// Skriv en funktion med två parameter av typ string Array och returnerar ett värde av typ string array\n// Funktionen ska lägga ihop de båda arrayerna och returnera den nya arrayen.\n\nfunction addArrays(array1:string[], array2:string[]):string[] {\n  const newArray = array1.concat(array2);\n  return newArray;\n}\n\nconsole.log(addArrays(['tjoo', 'hej'], ['hej', 'hopp']));\n\n\nconsole.log('___________________________2.6');\n\n/****************** Övning 2.6 **********************/\n// Skriv en funktion med en parameter av typ number Array och returnerar ett värde av typ string Array \n// Funktionen ska returnera en array med lika många element som argumentet men alla numbers ska ha gjort om till string\n//Hint: använd metoden toString()\n\nfunction arraySameNumberOfElements(array1:number[]):string[] {\n  // const arrayLength = array1.length;\n  // console.log(arrayLength);\n  const newArrayAsString = array1.toString();\n  // console.log('Ny array som sträng: ' + newArrayAsString);\n  const newArrayAsArray = newArrayAsString.split(',');\n  // console.log('Ny array som array: ' + newArrayAsArray);\n  console.log(typeof newArrayAsString);\n  console.log(typeof newArrayAsArray);\n  \n  return newArrayAsArray;\n}\n\nconsole.log('Nya arrayen 2.6 blir: ' + arraySameNumberOfElements([1, 5, 10, 20, 15, 10]));\n\nconsole.log('___________________________2.7');\n\nconsole.log('_________________________HIT ÄR KLART_________________________');\n\n\n/****************** Övning 2.7 **********************/\n// Skriv en higher order funktion som har tre parametrar, en av typ Function och två av typ number array. Arrayerna behöver vara lika långa. Funktionen ska returnera en number array. \n\n// Skriv några valfria funktioner att använda som callback-funktioner. De ska alla ha två parametrar av typ number, göra någon beräkning med argumenten och returnera ett number.\n\n// Higher order funktionen ska loopa igenom arrayerna och anropa callback-funktionen i varje loop med ett nummer från vardera arrayen.\n\n// Higher order funktionen returnerar en array med resultatet av beräkningarna som görs med callback-funktionen\n\nconst array1 = [1, 2, 3, 4];\nconst array2 = [2, 3, 4, 5];\n;\n\nfunction returnNumberArray(func:Function, nrArray1:number[], nrArray2:number[]):number[] {\n  // console.log(func(array1, array2));\n  // const resultFromFunc = func(array1, array2);\n  let resultFromFunc;\n  \n  const arg1 =  nrArray1.forEach((arraynumber) => {\n    console.log(func);\n  });\n  const arg2 =  nrArray2.forEach((arraynumber) => {\n    console.log(func);\n  });\n\n  console.log(arg1);\n\n  // console.log('resultArray');\n  // console.log(resultArray)\n  \n  return resultFromFunc;\n}\n\nfunction callbackAdd(arg1:number, arg2:number):number {\n  const sum = arg1 + arg2;\n  return sum;\n}\n\nfunction callbackMulti(arg1:number, arg2:number):number {\n  const sum = arg1 * arg2;\n  return sum;\n}\n// const resultAdd = returnNumberArray(add, [1, 2, 3, 4], [2, 3, 4, 5]);\n// const resultMulti = callbackAdd(multi2, [1, 2, 3, 4], [2, 3, 4, 5]);\n\nconst resultAdd = returnNumberArray(callbackAdd, array1, array2);\nconst resultMulti = returnNumberArray(callbackMulti, array1, array2);\n\nconsole.log(resultAdd); //[3, 5, 7, 9],\nconsole.log(resultMulti);//[2, 6, 12, 20]\n\n// console.log(returnNumberArray(resultAdd, 10, 20));\n// console.log(returnNumberArray(resultMulti, 5, 2));\n\n// returnNumberArray(resultAdd, [1, 2, 3, 4], [2, 3, 4, 5]);\n\n// console.log(result1);\n// console.log(result2);\n\n\n\n\nconsole.log('___________________________OBJECT___________________________');\nconsole.log('___________________________3.1');\n\n/****************** Övning 3.1 **********************/\n\n// Skriv en type alias för ett objekt som ska innehålla tre egenskaper:\n// name som är en string\n// age som är ett number\n// presentation som är en funktion\n// Skapa två olika objekt av din nya type, metoden presentation ska logga infon från de andra egenskaperna.\n// Anropa metoderna på båda objekten\n\ntype PersonAndAge = {\n  name: string,\n  age: number, \n  presentation: Function;\n}\n\nconst personObject1:PersonAndAge ={\n  name: 'Petra',\n  age: 48, \n  presentation(){\n    console.log('This is the name: '+ this.name + ' and the age ' + this.age );\n    \n  } \n}\nconst personObject2:PersonAndAge ={\n  name: 'Bosse',\n  age: 14, \n  presentation(){\n    console.log('This is the name: '+ this.name + ' and the age ' + this.age );\n  } \n}\npersonObject1.presentation();\npersonObject2.presentation();\n\nconsole.log('____________');\n/****************** Övning 3.3 **********************/\n\n// Skriv en type alias för ett bil-objekt som ska innehålla tre egenskaper:\n// model som är en string\n// year som är ett number\n// price som är ett number\n// Skriv en funktion som tar emot ett bil-objekt och returnerar ett nytt bil-objekt\n// Funktionen ska räkna om priset efter 20% rabatt och returnera ett bil-objekt med det nya priset\n\n\ntype carObject ={\n  model:string, \n  year: number, \n  price:number\n}\n\nconst carObject1:carObject ={\n  model:'Honda', \n  year: 1978, \n  price:20000\n}\nconsole.log(carObject1);\n\n\nfunction carObjectDiscount(carObject){\n  // console.log(carObject.price);\n\n  const newCarObjectprice = carObject.price - (carObject.price * 0.20);\n  // console.log(newCarObjectprice);\n\n  const newCarObject = {\n    model:carObject.model, \n    year: carObject.year, \n    price:newCarObjectprice\n  }\n  // console.log(newCarObject);\n  \n  return newCarObject;\n\n}\ncarObjectDiscount(carObject1)\nconsole.log(carObjectDiscount(carObject1));\n\n\nconsole.log('____________');\n\n\n/****************** Övning 3.3 **********************/\n\n// Skriv en funktion som tar emot ett argument av typ Animal. Funktionen ska inte returnera någonting.\n// Animal ska innehålla tre egenskaper\n// namn - en string\n// typ - en string\n// ålder - ett number\n// Funktionen ska logga all info om djuret i konsolen.\n\n\ntype AnimalObject = {\n  name:string, \n  type:string, \n  age:number\n}\n\nconst animal1:AnimalObject = {\n  name:'Bosse', \n  type:'Cat', \n  age:14\n}\n\nfunction logAnimal(animal:AnimalObject){\n  console.log(animal);\n  \n}\n\nlogAnimal(animal1);"],"names":["console","log","$ad2bcec7a0192558$var$number1","$ad2bcec7a0192558$var$word1","$ad2bcec7a0192558$var$variabel1","arg1","argument1","array1","concat","$ad2bcec7a0192558$var$arraySameNumberOfElements","newArrayAsString","toString","newArrayAsArray","split","$ad2bcec7a0192558$var$array1","$ad2bcec7a0192558$var$array2","$ad2bcec7a0192558$var$returnNumberArray","func","nrArray1","nrArray2","resultFromFunc","forEach","arraynumber","$ad2bcec7a0192558$var$resultAdd","arg2","$ad2bcec7a0192558$var$resultMulti","$ad2bcec7a0192558$var$personObject1","name","age","presentation","$ad2bcec7a0192558$var$personObject2","$ad2bcec7a0192558$var$carObject1","model","year","price","$ad2bcec7a0192558$var$carObjectDiscount","carObject","newCarObjectprice","type"],"version":3,"file":"index.abfcc263.js.map"}